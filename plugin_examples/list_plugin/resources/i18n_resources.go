// Code generated by go-bindata.
// sources:
// i18n/resources/en_US.all.json
// i18n/resources/zh_Hans.all.json
// DO NOT EDIT!

package resources

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _i18nResourcesEn_usAllJson = []byte(`[
  {
    "id": "CloudFoundy Applications  {{.Used}}/{{.Limit}} used",
    "translation": "CloudFoundy Applications  {{.Used}}/{{.Limit}} used"
  },
  {
    "id": "Containers  {{.MemoryUsed}}/{{.MemoryLimit}}  {{.IPCount}}/{{.IPLimit}} Public IPs Requested|{{.BoundIPCount}} Used",
    "translation": "Containers  {{.MemoryUsed}}/{{.MemoryLimit}}  {{.IPCount}}/{{.IPLimit}} Public IPs Requested|{{.BoundIPCount}} Used"
  },
  {
    "id": "Created",
    "translation": "Created"
  },
  {
    "id": "Image",
    "translation": "Image"
  },
  {
    "id": "Instances",
    "translation": "Instances"
  },
  {
    "id": "Memory (MB)",
    "translation": "Memory (MB)"
  },
  {
    "id": "Name",
    "translation": "Name"
  },
  {
    "id": "No API endpoint set. Use '{{.Command}}' to set an endpoint.",
    "translation": "No API endpoint set. Use '{{.Command}}' to set an endpoint."
  },
  {
    "id": "No space targeted. Use '{{.Command}}' to target an org and a space.",
    "translation": "No space targeted. Use '{{.Command}}' to target an org and a space."
  },
  {
    "id": "Not logged in. Use '{{.Command}}' to log in.",
    "translation": "Not logged in. Use '{{.Command}}' to log in."
  },
  {
    "id": "Plan",
    "translation": "Plan"
  },
  {
    "id": "Routes",
    "translation": "Routes"
  },
  {
    "id": "Service Offering",
    "translation": "Service Offering"
  },
  {
    "id": "Services {{.Count}}/{{.Limit}} used",
    "translation": "Services {{.Count}}/{{.Limit}} used"
  },
  {
    "id": "State",
    "translation": "State"
  },
  {
    "id": "Status",
    "translation": "Status"
  },
  {
    "id": "Unable to query apps and services of the target space:\n",
    "translation": "Unable to query apps and services of the target space:\n"
  },
  {
    "id": "Unable to query containers of the target space:\n",
    "translation": "Unable to query containers of the target space:\n"
  },
  {
    "id": "Unable to retrieve containers' usage and quota of the target space:\n",
    "translation": "Unable to retrieve containers' usage and quota of the target space:\n"
  },
  {
    "id": "Unable to retrieve usage of the target org:\n",
    "translation": "Unable to retrieve usage of the target org:\n"
  }
]`)

func i18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return _i18nResourcesEn_usAllJson, nil
}

func i18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := i18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "i18n/resources/en_US.all.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _i18nResourcesZh_hansAllJson = []byte(`[
  {
    "id": "CloudFoundy Applications  {{.Used}}/{{.Limit}} used",
    "translation": "CloudFoundy 应用程序  {{.Used}}/{{.Limit}} 已使用"
  },
  {
    "id": "Containers  {{.MemoryUsed}}/{{.MemoryLimit}}  {{.IPCount}}/{{.IPLimit}} Public IPs Requested|{{.BoundIPCount}} Used",
    "translation": "容器  {{.MemoryUsed}}/{{.MemoryLimit}}  {{.IPCount}}/{{.IPLimit}} 公共IP地址 已请求|{{.BoundIPCount}} 已使用"
  },
  {
    "id": "Created",
    "translation": "创建"
  },
  {
    "id": "Image",
    "translation": "镜像"
  },
  {
    "id": "Instances",
    "translation": "实例"
  },
  {
    "id": "Memory (MB)",
    "translation": "内存 （MB）"
  },
  {
    "id": "Name",
    "translation": "名称"
  },
  {
    "id": "No API endpoint set. Use '{{.Command}}' to set an endpoint.",
    "translation": "未设置任何 API 端点。请使用“{{.Command}}”来设置端点。"
  },
  {
    "id": "No space targeted. Use '{{.Command}}' to target an org and a space.",
    "translation": "未选择目标空间。请使用“{{.Command}}”来选择目标空间。"
  },
  {
    "id": "Not logged in. Use '{{.Command}}' to log in.",
    "translation": "未登录。请使用 '{{.Command}}' 登录。"
  },
  {
    "id": "Plan",
    "translation": "套餐"
  },
  {
    "id": "Routes",
    "translation": "路由"
  },
  {
    "id": "Service Offering",
    "translation": "服务产品"
  },
  {
    "id": "Services {{.Count}}/{{.Limit}} used",
    "translation": "服务 {{.Count}}/{{.Limit}} 已使用"
  },
  {
    "id": "State",
    "translation": "状态"
  },
  {
    "id": "Status",
    "translation": "状态"
  },
  {
    "id": "Unable to query apps and services of the target space:\n",
    "translation": "无法获取目标空间中的应用程序和服务:\n"
  },
  {
    "id": "Unable to query containers of the target space:\n",
    "translation": "无法获取目标空间中的容器\n"
  },
  {
    "id": "Unable to retrieve containers' usage and quota of the target space:\n",
    "translation": "无法获取目标空间中容器的使用情况和配额\n"
  },
  {
    "id": "Unable to retrieve usage of the target org:\n",
    "translation": "无法获取目标组织中的使用情况信息\n"
  }
]`)

func i18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return _i18nResourcesZh_hansAllJson, nil
}

func i18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := i18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "i18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"i18n/resources/en_US.all.json":   i18nResourcesEn_usAllJson,
	"i18n/resources/zh_Hans.all.json": i18nResourcesZh_hansAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"i18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"en_US.all.json":   &bintree{i18nResourcesEn_usAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{i18nResourcesZh_hansAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
